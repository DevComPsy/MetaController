function [mc, task] = task_b(mc, task)
%Implementation of a more complex dimensions task. 
  %% set up stimulus presentation
shown_stim(:,1) = [1 2];    % spatial position in task
shown_stim(:,2) = randperm(2); % stimulus
shown_stim(:,3) = repmat(randi(2),1,2); % background/context

%% fill in task structure
task.shown_stimulus(:,:,g) = shown_stim;

%%  determine potential outcomes
% if task.stimuli_backgr==1 & task.stimuli_backgr== [1,2];
% r1=1; else r1=0;end
% 
% if task.stimuli_backgr==1 & task.stimuli_backgr== [2,1];
% r2=1; else r2=0; end 
% 
% if task.stimuli_backgr==2 & task.stimuli_backgr== [1,2];
% r3=1; else r3=0; end 
% 
% if task.stimuli_backgr==2 & task.stimuli_backgr== [2,1];
% r4=1; else r4=0; end 
% 
% mc.stimuli_outcome=[r1 r2 r3 r4];%row - no background (1) or background (2); column is stimulus shape (e.g. 1= star; 2=circle)
% 
% if r2==1 | r1==1
% task.all_outcome_prob=[.4 .2], s1=1, s2=1;  else task.all_outcome_prob=[.6 .8], s1=0, s2=0; 
% end 
% 
% if r3==1 | r4==1;
%  s3=1, s4=1;  else   s3=0, s4=0; 
% end 
if shown_stim(:,1) == [1 2] & shown_stim(:,2) == 

%% determine potential outcomes
task.pot_outcomes(1,g) = rand(1)<=;   
task.pot_outcomes(2,g) = rand(1)<=;   


% %% play one game
% 
% %outcome 
% 
% task.shown_stimulus=  [1 task.stimuli_sign(1)  task.stimuli_backgr];%position of the stimulus (1=left, 2=right), sign of the stimulus, context 

end 
